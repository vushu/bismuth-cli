#!/usr/bin/python3
import os, sys, getopt, shutil, requests, re
from pathlib import Path

def pull_latest_bismuth():
    os.system("cd ~/.bismuth && git checkout master && git pull")

def create_make_file(projectname):

    if (projectname != ""):
        os.chdir(projectname)

    cwd = os.getcwd();
    folder = "native"
    if not(os.path.exists("CMakeLists.txt")):
        print("Please navigate inside your project")
        return

    if os.path.exists(folder):
        shutil.rmtree(folder)
    os.mkdir(folder)
    os.chdir(folder)
    os.system("cmake ..")
    os.chdir(cwd)
    if not(os.path.exists("./compile_commands.json")):
        os.system("ln -s ./native/compile_commands.json")
    print("---- start build: cd native && make")
    # os.chdir(cwd)
    # compile_commands = os.path.join(cwd, folder, "compile_commands.json");
    # print (compile_commands)
    # os.symlink(compile_commands, cwd)

def get_latest_bismuth():
    cwd = os.getcwd()
    clone = "git clone git@github.com:vushu/bismuth_cpp.git ~/.bismuth"

    if os.path.exists("~/.bismuth"):
        shutil.rmtree("~/.bismuth")
    os.system(clone)

def confirm_scene_overwrite(file_hpp):
    question = "File " + file_hpp + " already exists, do you wan't to overwrite? (y/n): "
    answer = input(question).lower().strip()
    if answer[0] == "y":
        return True
    else:
        return False

def create_scene_cpp(scene_name, scene_file_name, fullpath):
    scene_cpp = """#include \"""",scene_file_name,""".hpp"

""",scene_name,"""::""",scene_name,"""() {}

""",scene_name,"""::~""",scene_name,"""() {}

void """,scene_name,"""::init() {}

void """,scene_name,"""::start() {}

void """,scene_name,"""::processInput(float dt) {}

void """,scene_name,"""::update(float dt) {}

void """,scene_name,"""::render(float dt) {}

void """,scene_name,"""::close() {}

"""
    file_cpp = fullpath.lower() + ".cpp"
    if os.path.exists(file_cpp):
        if not confirm_scene_overwrite(file_cpp):
            print("exiting...")
            return
        else:
            print("file " + file_cpp + " is being overwritten")


    f = open(fullpath.lower() + ".cpp", "w+")
    f.writelines(scene_cpp);
    f.close();


def create_scene_files(scene_name):

    scene_hpp = """#pragma once
#include "bismuth/scene.hpp"
class """,scene_name,""" : public bi::Scene {
    public:
        """,scene_name,"""();
        ~""",scene_name,"""();

        void init() override;
        void start() override;
        void processInput(float dt) override;
        void update(float dt) override;
        void render(float dt) override;
        void close() override;
    private:
};
"""
    splitted = re.findall('[A-Z][^A-Z]*', scene_name)
    check_split  = "".join(splitted)
    scene_file_name = "_".join(splitted)
    scene_file_name = scene_file_name.strip()
    if not scene_file_name or check_split.lower() != scene_name.lower():
        scene_file_name = scene_name
    fullpath = os.path.join("game","src","scenes", scene_file_name)
    file_hpp = fullpath.lower() + ".hpp"
    if os.path.exists(file_hpp):
        if not confirm_scene_overwrite(file_hpp):
            print("exiting...")
            return
        else:
            print("file " + file_hpp + " is being overwritten")


    f = open(file_hpp, "w+")
    f.writelines(scene_hpp);
    f.close();
    create_scene_cpp(scene_name,scene_file_name.lower(), fullpath)


def create_maincpp():
    maincpp = """#include <bismuth/logging.hpp>

int main() {
    bi::log("hello bismuth!");
}"""

    f = open("main.cpp", "w+")
    f.writelines(maincpp)
    f.close()

def create_game_cmakelists(projectname):
    cmakeList ="""cmake_minimum_required(VERSION 3.15)
project(game)

#if (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")
    #add_compile_options("-s" "USE_FREETYPE=1")
#endif()
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(BISMUTH_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/include")
set(ENTT_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/externals/entt")
set(BOX2D_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/externals/box2d")
set(GLM_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/externals/glm")
set(TMX_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/externals/tmxlite")
set(NANO_VG_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/externals/nanovg/include")
set(NUKLEAR_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/externals/nuklear/include")
set(FREE_TYPE_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/bismuth/externals/freetype2/include")


if (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")
    set (source "${CMAKE_CURRENT_LIST_DIR}/resources")
    set (destination "${CMAKE_CURRENT_BINARY_DIR}/resources")
else()
    set (source "${CMAKE_CURRENT_LIST_DIR}/resources")
    set (destination "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/resources")
endif()


file(GLOB_RECURSE source_list
    "${CMAKE_CURRENT_LIST_DIR}/src/*.cpp")

file(GLOB_RECURSE header_list
    "${CMAKE_CURRENT_LIST_DIR}/src/*.h")

add_executable(${PROJECT_NAME} ${source_list} ${header_list} )

add_custom_command(
    TARGET ${PROJECT_NAME} PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E create_symlink ${source} ${destination}
    #COMMAND ${CMAKE_COMMAND} -E copy ${source} ${destination}
    DEPENDS ${destination}
    COMMENT "symbolic link resources folder from ${source} => ${destination}")

if (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")
    message("Compiling to WASM")

    set(CMAKE_EXECUTABLE_SUFFIX ".html")

    target_link_libraries(${PROJECT_NAME} "-s WASM=1") #web assembly FTW
    target_link_libraries(${PROJECT_NAME} "-s USE_WEBGL2=1")
    #target_link_libraries(${PROJECT_NAME} "-s FULL_ES3=1")
    #target_link_libraries(${PROJECT_NAME} "-s FULL_ES2=1")
    #target_link_libraries(${PROJECT_NAME} "-s USE_FREETYPE=1")
    target_link_libraries(${PROJECT_NAME} "-s ALLOW_MEMORY_GROWTH=1")
    target_link_libraries(${PROJECT_NAME} "--preload-file resources")
    target_link_libraries(${PROJECT_NAME} "--use-preload-plugins")
    target_link_libraries(${PROJECT_NAME} "-o ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/game.html")
    target_link_libraries(${PROJECT_NAME} "-s DEMANGLE_SUPPORT=1")
    target_compile_options(${PROJECT_NAME} PUBLIC "-O2") #creates the runtime resources
    target_link_libraries(${PROJECT_NAME} "-O2") #creates the runtime resources

    target_link_directories(${PROJECT_NAME}
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
        PRIVATE src)

    target_include_directories(${PROJECT_NAME}
        PUBLIC
        ${ENTT_INCLUDE_DIR}
        ${BISMUTH_INCLUDE_DIR}
        ${BOX2D_INCLUDE_DIR}
        ${GLM_INCLUDE_DIR}
        ${TMX_INCLUDE_DIR}
        ${NANO_VG_INCLUDE_DIR}
        ${NUKLEAR_INCLUDE_DIR}
        #${FREE_TYPE_INCLUDE_DIR}
        )

    target_link_libraries(${PROJECT_NAME} bismuth)

else()
    target_link_directories(${PROJECT_NAME}
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:include>
        PRIVATE src)

    target_include_directories(${PROJECT_NAME} PUBLIC
        ${ENTT_INCLUDE_DIR}
        ${BISMUTH_INCLUDE_DIR}
        ${BOX2D_INCLUDE_DIR}
        ${TMX_INCLUDE_DIR}
        ${GLM_INCLUDE_DIR}
        ${NANO_VG_INCLUDE_DIR}
        ${NUKLEAR_INCLUDE_DIR}
        )
    target_link_libraries(${PROJECT_NAME} bismuth)
endif()"""
    f = open("CMakeLists.txt", "w+")
    f.writelines(cmakeList)
    f.close()





def create_cmakelists(projectname):
    cmakeList ="""cmake_minimum_required(VERSION 3.15)
project(""",projectname,""")

enable_testing()
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

add_subdirectory(bismuth)
add_subdirectory(game)"""

    f = open("CMakeLists.txt", "w+")
    f.writelines(cmakeList)
    f.close()

def has_native_folder():
    return os.path.exists(os.path.join(os.getcwd(), "native"))

def is_inside_project():
    return os.path.exists(os.path.join(os.getcwd(), "bismuth"))

def run_game():
    print("---- Running game")
    if not(os.path.exists("native")):
        create_make_file("")
    if not(os.path.exists(os.path.join("native", "bin"))):
        create_make_file("")
    cwd = os.getcwd()
    nativefolder = os.path.join(cwd, "native")
    os.chdir(nativefolder)
    os.system("make")
    print(nativefolder)
    binfolder = os.path.join(nativefolder, "bin")
    os.chdir(binfolder)
    os.system("./game")

def run_project():
    if not(is_inside_project()):
        print("bismuth folder must exist are you inside your project?")
        return
    elif has_native_folder():
        run_game()
    elif not(has_native_folder()):
        print("---- Building game...")
        create_make_file("")
        run_game()





def update_submodule():
    cwdpath = os.getcwd();
    if not(is_inside_project()):
        print("bismuth folder must exist are you inside your project?")
        return
    os.chdir(os.path.join(cwdpath, "bismuth"))
    os.system("git checkout master && git pull")


def create_symlink(src,dest):
    if not(os.path.exists(src)):
        os.system("ln -s "+ src + " " + dest)


def download_url(url, save_path):
    r = requests.get(url)
    z = zipfile.ZipFile(io.BytesIO(r.content))
    z.extractall(save_path)

def copy_current_bismuth():
    home = str(Path.home())
    projectcwd = os.getcwd()
    bismuth_lib = os.path.join(home,".bismuth", "bismuth")
    bismuth_emptygame = os.path.join(home,".bismuth","game")

    if not(os.path.exists("CMakeLists.txt")):
        print("--- Please navigate to your project folder")
        return
    print("--- Now copying ~/.bismuth to project")
    bismuth_local = os.path.join(projectcwd, "bismuth")
    if (os.path.exists("bismuth")):
        shutil.rmtree(bismuth_local)
    shutil.copytree(bismuth_lib, bismuth_local)


def create_project(projectname):
    # repo = "git@github.com:vushu/bismuth_cpp.git ."
    # add_submodule = "git init && git submodule add " + repo + " && git submodule init && git submodule update"

    if os.path.exists(projectname):
        print("Folder " + projectname + " already exists")
        print("Please delete old folder or change projectname")
        return
    os.mkdir(projectname)
    projectcwd = os.path.join(os.getcwd(), projectname);
    os.chdir(projectname)

    home = str(Path.home())
    bismuth_path = os.path.join(home,".bismuth")
    if not(os.path.exists(bismuth_path)):
        get_latest_bismuth()

    create_cmakelists(projectname)

    #create_symlink("~/.bismuth/bismuth", "./bismuth")

    bismuth_lib = os.path.join(home,".bismuth", "bismuth")
    bismuth_emptygame = os.path.join(home,".bismuth","game")
    shutil.copytree(bismuth_lib, os.path.join(projectcwd, "bismuth"))
    shutil.copytree(bismuth_emptygame, os.path.join(projectcwd, "game"))

    #create_game_cmakelists(projectname)
    # os.chdir("src")

    # create_maincpp()
def create_scene(scene_name):
    if is_inside_project:
        scene_path = os.path.join("game", "src","scenes")
        if not os.path.exists(scene_path):
            os.mkdir(scene_path)
        create_scene_files(scene_name)

    else:
        print("you must be inside a project folder")

def print_help():
    print("use -h for help")
    print("use -b to build project")
    print("use -u to update the current project to use the version in ~/.bismuth")
    print("use -r to run project")
    print("use -l to pulling latest to ~/.bismuth")
    print("use -n <projectname> to create new bismuth project")
    print("use -s <scenename> to create new bismuth scene")


def main(argv):
    projectname = ''
    try:
        opts, args = getopt.getopt(argv, "hburln:bs:", ["help","build","update","run","latest","nproject=", "build=", "scene="])
    except getopt.GetoptError:
        sys.exit(2)
    for opt, arg in opts:
        if opt in ['-h', "--help"]:
            print_help()
            sys.exit()
        elif opt in ("-n", "--nproject"):
            projectname = arg
            print("---- Created project: " + projectname)
            create_project(projectname)
            print("---- cd " + projectname + " && bismuth-cli -r")
            sys.exit()
        elif opt in ['-b',"--build"]:
            print("---- Generating Makefile...")
            create_make_file(arg)
        elif opt in ("-u", "--update"):
            copy_current_bismuth()
        elif opt in ["-r", "--run"]:
            run_project()
        elif opt in ["-l", "--latest"]:
            print("---- Pulling lastest bismuth to ~/.bismuth")
            pull_latest_bismuth()
        elif opt in ['-s', "--scene"]:
            if (arg == ""):
                return print("please add a scene name")
            print("creating scene... " + arg)
            create_scene(arg)


if __name__ == "__main__":
    main(sys.argv[1:])
